# .github/workflows/deploy-helm-gke.yml
name: Deploy Application to GKE via Helm
on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: "us-central1"
  GKE_CLUSTER_NAME: "polygon-monitor-cluster" # Or your actual TF output/variable
  GAR_REPO_NAME: "polygon-monitor-repo"
  IMAGE_NAME: "polygon-monitor-app"
  HELM_RELEASE_NAME: "polygon-monitor-app"
  K8S_NAMESPACE: "polygon-monitor" # Must match var.polygon_monitor_app_k8s_namespace
  KSA_NAME: "polygon-monitor-app-ksa" # Must match var.polygon_monitor_app_k8s_sa_name
  HELM_CHART_PATH: "./helm/polygon-monitor-app" # Ensure this path is correct
  # The NAME of the static IP resource created by Terraform
  STATIC_IP_NAME: "polygon-monitor-cluster-ingress-ip" # Should match your TF resource name
  # Set to "letsencrypt-prod" after testing with "letsencrypt-staging"
  CERT_MANAGER_ISSUER: "letsencrypt-staging"
permissions:
  contents: "read"
  id-token: "write"
jobs:
  deploy-to-gke:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Set up Cloud SDK
        uses: "google-github-actions/setup-gcloud@v2"
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          install_components: "gke-gcloud-auth-plugin"
      - name: Get GKE cluster credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --project ${{ env.GCP_PROJECT_ID }}
      - name: Get Static IP Address
        id: get_ip
        run: |
          IP_ADDRESS=$(gcloud compute addresses describe ${{ env.STATIC_IP_NAME }} --global --project=${{ env.GCP_PROJECT_ID }} --format='value(address)')
          if [ -z "$IP_ADDRESS" ]; then
            echo "Error: Could not retrieve static IP address for ${{ env.STATIC_IP_NAME }}"
            exit 1
          fi
          echo "STATIC_IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_ENV
          echo "Fetched IP: $IP_ADDRESS"
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "v3.12.3" # Or a newer stable version
      - name: Debug Variables and Paths (CRITICAL - CHECK THIS OUTPUT)
        id: debug_paths # Give it an ID if you need to reference its output
        run: |
          echo "--- Debugging Helm Deployment Variables ---"
          echo "1. HELM_RELEASE_NAME: '${{ env.HELM_RELEASE_NAME }}'"
          echo "2. HELM_CHART_PATH: '${{ env.HELM_CHART_PATH }}'"
          echo "3. K8S_NAMESPACE: '${{ env.K8S_NAMESPACE }}'"
          echo "-------------------------------------------"
          echo "Current PWD: $(pwd)"
          echo "Listing contents of PWD (where checkout happens):"
          ls -la
          echo "-------------------------------------------"
          echo "Verifying HELM_CHART_PATH ('${{ env.HELM_CHART_PATH }}'):"
          CHART_PATH_TO_TEST="${{ env.HELM_CHART_PATH }}" # Use a shell var for clarity
          if [ -z "$CHART_PATH_TO_TEST" ]; then
            echo "ERROR: HELM_CHART_PATH is empty!"
            exit 1
          fi
          if [ -d "$CHART_PATH_TO_TEST" ]; then
            echo "SUCCESS: '$CHART_PATH_TO_TEST' exists as a directory."
            echo "Listing contents of '$CHART_PATH_TO_TEST':"
            ls -la "$CHART_PATH_TO_TEST"
            if [ -f "$CHART_PATH_TO_TEST/Chart.yaml" ]; then
              echo "SUCCESS: Chart.yaml found in '$CHART_PATH_TO_TEST'."
            else
              echo "ERROR: Chart.yaml NOT found in '$CHART_PATH_TO_TEST'!"
              exit 1 # Fail fast if Chart.yaml is missing
            fi
          else
            echo "ERROR: '$CHART_PATH_TO_TEST' does NOT exist as a directory."
            echo "Listing contents of './charts' (if it exists relative to PWD) for context:"
            ls -la ./charts || echo "'./charts' directory not found at PWD."
            exit 1 # Fail fast if chart path is wrong
          fi
          echo "--- End of Path Debugging ---"
      - name: Test Helm Lint (Pre-check)
        run: |
          echo "Attempting to lint chart at: ${{ env.HELM_CHART_PATH }}"
          helm lint "${{ env.HELM_CHART_PATH }}"
          echo "Helm lint completed successfully."
      - name: Deploy Helm chart
        env:
          APP_HOSTNAME: "polygon-monitor-app.${{ env.STATIC_IP_ADDRESS }}.nip.io"
          TLS_SECRET_NAME: "polygon-monitor-app-tls"
        run: |
          echo "--- Preparing for Helm Upgrade (TEST RUN) ---"
          echo "INFO: Main Ingress will be deployed WITHOUT the TLS block initially."
          echo "      Cert-manager will attempt to get the certificate."
          echo "      If successful, a subsequent deployment will enable TLS on the main Ingress."
          echo "Using App Hostname: '${APP_HOSTNAME}'"
          echo "Using Static IP Name: '${{ env.STATIC_IP_NAME }}'"
          echo "Using Cert-Manager Issuer: '${{ env.CERT_MANAGER_ISSUER }}'"
          echo "--- Helm Command (TEST RUN) ---"
          helm upgrade --install "${{ env.HELM_RELEASE_NAME }}" "${{ env.HELM_CHART_PATH }}" --namespace "${{ env.K8S_NAMESPACE }}" --create-namespace --values "${{ env.HELM_CHART_PATH }}/values.yaml" --set image.repository="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPO_NAME }}/${{ env.IMAGE_NAME }}" --set image.tag="${{ github.sha }}" --set secrets.polygonscanApiKey="${{ secrets.POLYGONSCAN_API_KEY }}" --set serviceAccount.create=true --set serviceAccount.name="${{ env.KSA_NAME }}" --set serviceAccount.annotations."iam\.gke\.io/gcp-service-account"="${{ secrets.TF_OUTPUT_GSA_EMAIL }}" --set ingress.enabled=true --set ingress.annotations."kubernetes\.io/ingress\.global-static-ip-name"="${{ env.STATIC_IP_NAME }}" --set ingress.annotations."cert-manager\.io/cluster-issuer"="${{ env.CERT_MANAGER_ISSUER }}" --set ingress.hosts[0].host="${APP_HOSTNAME}" --set ingress.enableTls=false --wait --timeout 10m --debug
