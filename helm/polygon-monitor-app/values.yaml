# Default values for polygon-monitor-app.
replicaCount: 1

image:
  # repository will be set by CI/CD, e.g., us-central1-docker.pkg.dev/YOUR_PROJECT_ID/YOUR_REPO/hello-web3-app
  repository: "gcr.io/google-samples/hello-app" # Placeholder, MUST be overridden
  pullPolicy: IfNotPresent
  # tag will be set by CI/CD, e.g., the git SHA or 'latest'
  tag: "1.0" # Placeholder, MUST be overridden

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "" # Keep this empty to use default naming convention <releaseName>-<chartName>

# KSA = Kubernetes Service Account
# GSA = Google Service Account (for Workload Identity)
serviceAccount:
  create: true
  # Name of the KSA to create or use.
  # Should match var.polygon_monitor_app_k8s_sa_name from Terraform ('polygon-monitor-app-ksa').
  name: "polygon-monitor-app-ksa"
  annotations:
    {}
    # This will be populated by CI/CD or helm install command:
    # iam.gke.io/gcp-service-account: "GSA_EMAIL_FROM_TERRAFORM_OUTPUT"

podAnnotations:
  # Annotations for Prometheus to scrape metrics
  prometheus.io/scrape: "true"
  # The HelloWeb3 app exposes metrics on its main port (e.g., 8080) at /metrics
  prometheus.io/port: "8080" # This should match appContainerPort
  prometheus.io/path: "/metrics"

# Application specific configuration
appContainerPort: 8080 # Port the Node.js app listens on INSIDE the container
# The HelloWeb3 app uses the PORT environment variable.

# Secrets to be created and mounted.
# The key 'polygonscanApiKey' will be used to create a K8s secret.
# The value for this MUST be provided during helm install/upgrade.
secrets:
  polygonscanApiKey: "" # Example: --set secrets.polygonscanApiKey=YOUR_ACTUAL_KEY

service:
  type: LoadBalancer # Exposes the app publicly via a GCP Load Balancer
  port: 80 # External port on the LoadBalancer that maps to targetPort
  targetPort: http # Name of the port in the deployment spec (which maps to appContainerPort)

ingress:
  enabled: false # We are using Service type LoadBalancer for simplicity

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi

autoscaling:
  enabled: false
  # minReplicas: 1
  # maxReplicas: 3
  # targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}
tolerations: []
affinity: {}
